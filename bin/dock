#!/bin/bash
#
# Dock the computer, configuring the window managers and external peripherals.
#

mon_int="eDP-1"
mon_ext_home1="DP-2-2"
mon_ext_office1="DP-2-2"
mon_ext_office2="DP-2-3"
res_4k="3840x2160"
script=$(basename "${0}")

i3_office_layout() {
    xrandr \
        --output "${mon_ext_office1}" --primary --auto \
        --output "${mon_ext_office2}" --auto --right-of "${mon_ext_office1}" --rotate left \
        --output "${mon_int}" --off

    monitor_remove_disconnected
    for w in "1 2 3 4"
    do
        i3-msg "workspace ${w}"
        i3-msg "focus next"
    done
	keyboard_mouse_setup
}

i3_home_layout() {
    xrandr \
        --output "${mon_ext_home1}" --mode "${res_4k}" --primary \
        --output "${mon_int}" --off

	keyboard_mouse_setup
    # shellcheck disable=SC2034
	ignore=$(i3-msg reload)
    wm-start-polybar
}

i3_undock() {
    output_ids="$(xrandr --query | grep isco | awk '{ print $1 }')"
    for o in ${output_ids}
    do
        xrandr --output "${o}" --off
    done

    win_ids="$(wmctrl -l | cut -d\  -f1)"
    this_workspace="$(xdotool get_desktop)"
    for i in ${win_ids}
    do
        wmctrl -r "${i}" -t "${this_workspace}"
    done

	monitor_internal_only
    i3-msg reload
	keyboard_mouse_setup
    wm-start-polybar
}

bspwm_office_layout() {
    xrandr \
        --output "${mon_ext_office1}" --primary --auto \
        --output "${mon_ext_office2}" --auto --right-of "${mon_ext_office1}" --rotate left \
        --output "${mon_int}" --off

    bspc wm -O "${mon_ext_office1}" "${mon_ext_office2}"
    wm-rename-desktops
    wm-ensure-desktops
    wm-rename-desktops

    wm-assign-desktop-to-monitor 1 "${mon_ext_office1}"
    wm-assign-desktop-to-monitor 2 "${mon_ext_office2}"
    wm-assign-desktop-to-monitor 3 "${mon_ext_office1}"
    wm-assign-desktop-to-monitor 4 "${mon_ext_office1}"

    keyboard_mouse_setup
}

bspwm_home_layout() {
    desktops=$(bspc query -D)
    for i in ${desktops}
    do
        bspc desktop "${i}" --to-monitor "${mon_ext_home1}"
    done

    bspc monitor "${mon_int}" --remove
    xrandr \
        --output "${mon_ext_home1}" --primary --auto \
        --output "${mon_int}" --off

    keyboard_mouse_setup
    sh ~/.config/bspwm/bspwmrc &
}


bspwm_undock() {
    monitors=$(bspc query -M --names)
    for m in ${monitors}
    do
        if [ ! "${m}" = "${mon_int}" ]; then
            bspc monitor "${m}" --remove
        fi
    done

    bspc config remove_disabled_monitors true
    bspc config merge_overlapping_monitors true
    bspc wm -o
    wm-rename-desktops
    desktops=$(bspc query -D)
    for k in ${desktops}
    do
        bspc desktop "${k}" -m "${mon_int}"
    done
    monitor_internal_only
    keyboard_mouse_setup
    sh ~/.config/bspwm/bspwmrc &
    wm-ensure-desktops
    # wm-start-polybar
}


cwm_home_layout() {
    xrandr \
        --output "${mon_ext_home1}" --primary --mode "${res_4k}" \
        --output "${mon_int}" --auto --right-of "${mon_ext_home1}"

    keyboard_mouse_setup
}

keyboard_mouse_setup() {
    setdvorarkk
    setmouse
}

monitor_internal_only() {
    monitors=$(xrandr -q | grep " connected" | cut -d\  -f1)
    for i in ${monitors}
    do
        if [ ! "${i}" = "${mon_int}" ]; then
            xrandr --output "${i}" --off
        fi
    done
    xrandr --output ${mon_int} --auto --primary
}

monitor_remove_disconnected() {
    monitors=$(xrandr --query | grep isconne | awk '{ print $1 }')
    for i in ${monitors}
    do
        xrandr --output "${i}" --off
    done
}


if [ "x${1}" = "xhome" ]; then
    wm-is-bspwm && bspwm_home_layout && exit 0
    wm-is-i3 && i3_home_layout && exit 0
    echo "ERROR: Window manager not supported."
fi

if [ "x${1}" = "xoffice" ]; then
    wm-is-bspwm && bspwm_home_layout && exit 0
    wm-is-i3 && i3_home_layout && exit 0
    echo "ERROR: Window manager not supported." && exit 1
fi

if [ "x${1}" = "xundock" ]; then
    wm-is-bspwm && bspwm_undock && monitor_internal_only && keyboard_mouse_setup && exit 0
    wm-is-i3 && i3_undock && monitor_internal_only && keyboard_mouse_setup && exit 0
    echo "ERROR: Window manager not supported." && exit 1
fi

echo "Usage: ${script} LOCATION"
echo ""
echo "Where LOCATION matches one of the following,"
echo ""
echo "  home    - Single external monitor (primary), internal monitor enabled."
echo "  office  - Two external monitors (primary), internal monitor disabled."
echo "  undock  - Undock the computer, internal monitor enabled."
echo ""
