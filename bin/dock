#!/bin/bash
#
# Dock the computer, configuring the window managers and external peripherals.
#
# For monitors, the following layouts are supported,
# Office:
#
#             +-----+
#    +------+ | TWO |
#    | ONE  | |     |
#    +------+ |     |
#             +-----+
#
# Where ONE is the primary monitor in landscape mode,
# and TWO is the secondary monitor in portrait mode.
# The built-in display is disabled.
#
#
# Home:
#
#   +-------+
#   |  ONE  |
#   +-------+
#
# Where ONE is the primary monitor in landscape mode, connected
# through a USB C-hub via Displayport.
# The built-in display is disabled.
#
#
# Meeting:
#
#   +-----+ +-------+
#   | INT | | ONE   |
#   +-----+ |       |
#           +-------+
#
# Where INT is the primary monitor in landscape mode
# and ONE is the external monitor, TV or projector.

DISPLAY_INTERNAL="eDP-1"
DISPLAY_EXTERNAL_HOME_ONE="DP-2-2"
DISPLAY_EXTERNAL_OFFICE_ONE="DP-2-2"
DISPLAY_EXTERNAL_OFFICE_TWO="DP-2-3"
DISPLAY_EXTERNAL_MEETING_ONE="HDMI-2"
script=$(basename "${0}")


i3_office_layout() {
    xrandr \
        --output "${DISPLAY_EXTERNAL_OFFICE_ONE}" --primary --auto \
        --output "${DISPLAY_EXTERNAL_OFFICE_TWO}" --auto --right-of "${DISPLAY_EXTERNAL_OFFICE_ONE}" --rotate left \
        --output "${DISPLAY_INTERNAL}" --off

    monitor_remove_disconnected
    for w in "1 2 3 4"
    do
        i3-msg "workspace ${w}"
        i3-msg "focus next"
    done
	keyboard_mouse_setup
}


i3_home_layout() {
    xrandr \
        --output "${DISPLAY_EXTERNAL_HOME_ONE}" --mode 3840x2160 --primary \
        --output "${DISPLAY_INTERNAL}" --off

	keyboard_mouse_setup
    # shellcheck disable=SC2034
	ignore=$(i3-msg reload)
    wm-polybar.sh
}


i3_undock() {
    output_ids="$(xrandr --query | grep isco | awk '{ print $1 }')"
    for o in ${output_ids}
    do
        xrandr --output "${o}" --off
    done

    win_ids="$(wmctrl -l | cut -d\  -f1)"
    this_workspace="$(xdotool get_desktop)"
    for i in ${win_ids}
    do
        wmctrl -r "${i}" -t "${this_workspace}"
    done

	monitor_internal_only
    i3-msg reload
	keyboard_mouse_setup
    wm-polybar.sh
}


bspwm_office_layout() {
    xrandr \
        --output "${DISPLAY_EXTERNAL_OFFICE_ONE}" --primary --auto \
        --output "${DISPLAY_EXTERNAL_OFFICE_TWO}" --auto --right-of "${DISPLAY_EXTERNAL_OFFICE_ONE}" --rotate left \
        --output "${DISPLAY_INTERNAL}" --off

    desktops=$(bspc query -D)
    for i in ${desktops}
    do
        bspc desktop "${i}" --to-monitor "${DISPLAY_EXTERNAL_OFFICE_ONE}"
    done
    last_one="$(bspc query -D | tail -n1)"
    if [ "${last_one}" != "" ]; then
        bspc desktop "${last_one}" --to-monitor "${DISPLAY_EXTERNAL_OFFICE_TWO}"
    fi
    bspc wm -O "${DISPLAY_EXTERNAL_OFFICE_ONE}" "${DISPLAY_EXTERNAL_OFFICE_TWO}"
    keyboard_mouse_setup
    sh ~/.config/bspwm/bspwmrc &
}


bspwm_home_layout() {
    desktops=$(bspc query -D)
    for i in ${desktops}
    do
        bspc desktop "${i}" --to-monitor "${DISPLAY_EXTERNAL_HOME_ONE}"
    done

    bspc monitor "${DISPLAY_INTERNAL}" --remove
    xrandr \
        --output "${DISPLAY_EXTERNAL_HOME_ONE}" --primary --auto \
        --output "${DISPLAY_INTERNAL}" --off

    keyboard_mouse_setup
    sh ~/.config/bspwm/bspwmrc &
}


bspwm_undock() {
	desktops=$(bspc query -D)
	for i in ${desktops}
	do
		bspc desktop "${i}" --to-monitor "${DISPLAY_INTERNAL}"
	done
    monitors=$(bspc query -M --names)
    for m in ${monitors}
    do
        if [ ! "${m}" = "${DISPLAY_INTERNAL}" ]; then
            bspc monitor "${m}" --remove
        fi
    done

    monitor_internal_only
    keyboard_mouse_setup
}


cwm_home_layout() {
    xrandr \
        --output "${DISPLAY_EXTERNAL_HOME_ONE}" --primary --mode 3840x2160 \
        --output "${DISPLAY_INTERNAL}" --auto --right-of "${DISPLAY_EXTERNAL_HOME_ONE}"

    keyboard_mouse_setup
}


meeting_layout() {
    xrandr \
        --output "${DISPLAY_INTERNAL}" --primary --auto \
        --output "${DISPLAY_EXTERNAL_MEETING_ONE}" --auto --right-of "${DISPLAY_INTERNAL}" \

    keyboard_mouse_setup
}


keyboard_mouse_setup() {
    ~/bin/setdvorarkk
    ~/bin/setmouse
}

monitor_internal_only() {
    monitors=$(xrandr -q | grep " connected" | cut -d\  -f1)
    for i in ${monitors}
    do
        if [ ! "${i}" = "${DISPLAY_INTERNAL}" ]; then
            xrandr --output "${i}" --off
        fi
    done
    xrandr --output ${DISPLAY_INTERNAL} --auto --primary
}

monitor_remove_disconnected() {
    monitors=$(xrandr --query | grep isconne | awk '{ print $1 }')
    for i in ${monitors}
    do
        xrandr --output "${i}" --off
    done
}

wm_is_bspwm=0
wm_is_i3=0
wm_is_cwm=0

if pgrep bspwm; then
    wm_is_bspwm=1
fi

if pgrep i3; then
    wm_is_i3=1
fi

if pgrep cwm; then
	wm_is_cwm=1
fi


## HOME HANDLER
if [ "x${1}" = "xhome" ]; then
    if [ "${wm_is_bspwm}" -eq 1 ]; then
    	bspwm_home_layout
    	exit 0
    fi

    if [ "${wm_is_i3}" -eq 1 ]; then
        i3_home_layout
        exit 0
    fi

    if [ "${wm_is_cwm}" -eq 1 ]; then
        cwm_home_layout
        exit 0
    fi
fi

## OFFICE HANDLER
if [ "x${1}" = "xoffice" ]; then
    if [ "${wm_is_i3}" -eq 1 ]; then
        i3_office_layout
        exit 0
    fi

    if [ "${wm_is_bspwm}" -eq 1 ]; then
        bspwm_office_layout
        exit 0
    fi
fi


## MEETING HANDLER
if [ "x${1}" = "xmeeting" ]; then
	meeting_layout
	exit 0
fi


## UNDOCK HANDLER
if [ "x${1}" = "xundock" ]; then
    if [ "${wm_is_i3}" -eq 1 ]; then
        i3_undock
        exit 0
    fi

    if [ "${wm_is_bspwm}" -eq 1 ]; then
        bspwm_undock
        exit 0
    fi

	# Unsupported WM, assume nothing specific to do.
	monitor_internal_only
	keyboard_mouse_setup
fi


echo "Usage: ${script} LOCATION"
echo ""
echo "Where LOCATION matches one of the following,"
echo ""
echo "  home    - Single external monitor (primary), internal monitor enabled."
echo "  office  - Two external monitors (primary), internal monitor disabled."
echo "  meeting - Single external monitor, internal monitor enabled (primary)."
echo "  undock  - Undock the computer"
echo ""
