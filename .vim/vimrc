"
" BEHAVIOR
"

set nocompatible
call pathogen#infect()
call pathogen#infect('custom_bundles{}')

syntax on
filetype plugin indent on

set hidden
set encoding=utf-8
set showcmd
set wildmode=list:longest
set backupdir=~/.vim/backup
set directory=~/.vim/tmp
set noswapfile
set nobackup

set expandtab
set tabstop=4 shiftwidth=4
set backspace=indent,eol,start

set scrolloff=5
set laststatus=2
" set statusline=%{SyntasticStatuslineFlag()}\ \ %=%t%m\:%l\,%c

let NERDTreeShowHidden=1

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_error_symbol='>'
let g:syntastic_warning_symbol='!'
let g:syntastic_auto_jump=0

let g:syntastic_sh_checkers = ['sh', 'shellcheck']
let g:syntastic_go_checkers = ['go', 'gofmt', 'golint']

" Requires FZF Github repo checked out in ~/.fzf.
set rtp+=~/.fzf

set hlsearch
set incsearch
set ignorecase
set smartcase
set wrapscan

autocmd BufEnter * syn match ErrorMsg /[^\x00-\x7F]/

" Use Quickfix window type for all vim-go windows, allows for
" using :cnext and :cprevious everywhere, rather than having
" to use :lnext and :lprevious in location list windows.
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1


"
" APPEARANCE
"
set background=light
colorscheme porter

" Reset values.
hi clear goTypeName
hi clear goFunction
hi clear Identifier
hi clear Special
hi clear Statement
hi clear Normal
hi clear Constant
hi clear Operator
hi clear Comment
hi clear htmlItalic
set fillchars+=vert:\│


"
" KEYS
"

let mapleader = "\<Space>"

map <leader>c :Commentary<cr>

map <leader>/ :TagbarToggle<cr>
map <leader>n :NERDTreeToggle<cr>
map <leader>. :bn<cr>
map <leader>m :bp<cr>
map <leader>, :bp<cr>

nmap <leader>w :w<CR>
nmap <leader>x :x<CR>
nmap <leader>q :q!<CR>

nmap <leader>b :Buffers<CR>
nmap <leader>T :Tags<CR>
nmap <leader>f :Files<CR>

nnoremap <leader>a :cclose<CR>
nnoremap <leader>N :cnext<CR>
nnoremap <leader>P :cprevious<CR>

map <leader>h <C-w>h
map <leader>l <C-w>l
map <leader>j <C-w>j
map <leader>k <C-w>k

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>t :GoTest<cr>

nmap <C-g> :GoDeclsDir<cr>
imap <C-g> <esc>:<C-u>GoDeclsDir<cr>
augroup go
  autocmd!

" :GoDoc
autocmd FileType go nmap <Leader>d <Plug>(go-doc)
autocmd FileType go nmap <Leader>D <Plug>(go-doc-vertical)

" :GoCoverageToggle
autocmd FileType go nmap <Leader>o <Plug>(go-coverage-toggle)

" :GoInfo
autocmd FileType go nmap <Leader>i <Plug>(go-info)

" :GoMetaLinter
autocmd FileType go nmap <Leader>m <Plug>(go-metalinter)

" :GoDef but opens in a vertical split
autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
" :GoDef but opens in a horizontal split
autocmd FileType go nmap <Leader>s <Plug>(go-def-split)
augroup END

autocmd BufNewFile,BufRead *.json set ft=javascript


"
" FUNCTIONS
"

function! GetSyntaxID()
  return synID(line('.'), col('.'), 1)
endfunction

function! GetSyntaxParentID()
  return synIDtrans(GetSyntaxID())
endfunction

function! GetSyntax()
  echo synIDattr(GetSyntaxID(), 'name')
  exec "hi ".synIDattr(GetSyntaxParentID(), 'name')
endfunction


"
" TESTING AREA
"

" Disable blinking cursors in Gvim.
set guicursor=n-v-c:block-Cursor
set guicursor+=a:blinkon0

highlight Normal guifg=#121212 guibg=#FFFFEA
set guifont=GoMono\ 12

" Hide menubar (m), toolbar (T), left and right scrollbars (L, r).
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=L

" set fillchars=stl:―,stlnc:—,vert:│,fold:۰,diff:·
hi statusline cterm=reverse ctermbg=NONE ctermfg=NONE guibg=#eaffff
hi statuslinenc term=NONE ctermbg=NONE cterm=underline gui=none guibg=#ffffea
set statusline=
set statusline+=%<\  
set statusline+=%F:%l 
set statusline+=\ (%P)\ \ \ \ 

" For some reason, in Gvim, text wrapping is enforced for ~/.vim/vimrc.
" This disables it.
set formatoptions=

