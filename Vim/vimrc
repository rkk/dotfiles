"
" VIM CONFIGURATION
" Tested on Vim 7.x and 8.x in terminals on Linux, OpenBSD
" and Mac OS X.
"
" Quick tip: Reload this file by running ":so %", meaning source
" the currently open file.


"
" BEHAVIOR
"

set nocompatible
call pathogen#infect()
call pathogen#infect('custom_bundles{}')

syntax on
filetype plugin indent on

set hidden
set encoding=utf-8
set showcmd
set wildmode=list:longest
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

set expandtab
set tabstop=4 shiftwidth=4
set backspace=indent,eol,start

set scrolloff=5
set laststatus=2
" StatusLine format: <Syntax check> %= <Filename> : <Line number>, <Character>
set statusline=%{SyntasticStatuslineFlag()}\ \ %=%t%m\:%l\,%c

let NERDTreeShowHidden=1

let g:syntastic_error_symbol='>'
let g:syntastic_warning_symbol='!'
let g:syntastic_auto_jump=0

let g:syntastic_sh_checkers = ['sh', 'shellcheck']
let g:syntastic_go_checkers = ['go', 'gofmt', 'golint']

" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
" Requires FZF Github repo checked out in ~/.fzf.
set rtp+=~/.fzf

set hlsearch
set incsearch
set ignorecase
set smartcase
set wrapscan


"
" APPEARANCE
"
set background=light
colorscheme acne




"
" KEYS
"

let mapleader = "\<Space>"


" File, tag and buffer management
map <leader>/ :TagbarToggle<cr>
map <leader>n :NERDTreeToggle<cr>
map <leader>. :bn<cr>
map <leader>m :bp<cr>
map <leader>, :bp<cr>

nmap <leader>w :w<CR>
nmap <leader>x :x<CR>
nmap <leader>q :q!<CR>

nmap <leader>b :Buffers<CR>
nmap <leader>T :Tags<CR>
nmap <leader>f :Files<CR>

nnoremap <leader>a :cclose<CR>
nnoremap <leader>N :cnext<CR>
nnoremap <leader>P :cprevious<CR>


"" Go settings
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>g <Plug>(go-def)

" Use JavaScript syntax highlighting for JSON
autocmd BufNewFile,BufRead *.json set ft=javascript


""
"" FUNCTIONS
""

function! GetSyntaxID()
  return synID(line('.'), col('.'), 1)
endfunction

function! GetSyntaxParentID()
  return synIDtrans(GetSyntaxID())
endfunction

function! GetSyntax()
  echo synIDattr(GetSyntaxID(), 'name')
  exec "hi ".synIDattr(GetSyntaxParentID(), 'name')
endfunction


""
"" TESTING AREA
""

map <leader>c :Commentary<cr>
map <leader>t :GoTest<cr>
"" Navigate splits using <leader>{h,l,j,k}
map <leader>h <C-w>h
map <leader>l <C-w>l
map <leader>j <C-w>j
map <leader>k <C-w>k

set fillchars+=vert:\|

" Do not use swapfiles or backup files.
"
set noswapfile
set nobackup
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1

" Open :GoDeclsDir with ctrl-g
nmap <C-g> :GoDeclsDir<cr>
imap <C-g> <esc>:<C-u>GoDeclsDir<cr>
augroup go
  autocmd!

" :GoDoc
autocmd FileType go nmap <Leader>d <Plug>(go-doc)
autocmd FileType go nmap <Leader>D <Plug>(go-doc-vertical)

" :GoCoverageToggle
autocmd FileType go nmap <Leader>o <Plug>(go-coverage-toggle)

" :GoInfo
autocmd FileType go nmap <Leader>i <Plug>(go-info)

" :GoMetaLinter
autocmd FileType go nmap <Leader>m <Plug>(go-metalinter)

" :GoDef but opens in a vertical split
autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
" :GoDef but opens in a horizontal split
autocmd FileType go nmap <Leader>s <Plug>(go-def-split)
augroup END


map <Tab> :bn<cr>
map Shift-<Tab> :bp<cr>
map <Leader>e :GoAlternate<cr>




" Display only the following items in Tagbar. Some of
" the supported types,
"
"   - i:imports
"   - p:packages
"
" Run :TagbarGetTypeConfig to get the full list.
"
let g:tagbar_type_go = {
    \ 'kinds' : [
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions',
        \ '?:unknown',
    \ ],
\ }
